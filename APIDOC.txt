环境： 	ubuntu 16.04
		nodejs 8.11.3
		mongodb 
		redis


接口：
		restful API格式：通过get/post/put/delete/ 进行数据的查询修改增加删除		
		session方式：使用JWT 令牌进行客户身份记录
		cache：使用global内存变量方式进行数据定时更新
			
				
				
	
		
		接口分布：
		
		1、用户注册：
			
			用户使用邮箱进行注册，每个邮箱只能注册一次，
			注册的同时给邮箱发送一个验证码，验证邮箱有效性，
			注册成功后返回标识JWT给客户端
			注册失败提示（注册邮箱重复，其他原因）
			
		
		2、用户投票：
		
			1)根据用户客户端传来的JWT进行判断，如果非法直接拒绝。
			2)对于合法的JWT进行客户信息验证，判断为注册用户并且邮箱不为空再进行下一步确认
			3)判断投票系统是否开启，如果关闭则返回提示（投票还未开始）
			4)确认该用户所对应的邮箱未进行投票，如果投过票的返回提示（您已投过票，不能再进行投票）
			5)接收用户投票的信息，判断所投票数是否大于等于2，小于等于20%的总候选人数（向下取整）=N如果不符合则返回提示（投票人数需在2至N位）
			6)成功投票，进行数据操作，并返回客户提示（投票成功，感谢您的参与。）
			
		3、候选人查询
		
			1)工作人员的身份验证，如果非法直接拒绝。
			2)对于合法工作人员身份，则接受所传递的信息，并返回对应的候选人信息
			
		4、候选人增加
		
			1)工作人员的身份验证，如果非法直接拒绝。
			2)对于合法工作人员身份，则接受所传递的信息，进行候选人数据插入操作，并返回提示（增加成功）
			
		5、候选人修改
		
			1)工作人员的身份验证，如果非法直接拒绝。
			2)对于合法工作人员身份，则接受所传递的信息，进行候选人数据修改操作，并返回提示（修改成功）
			
		6、候选人删除
		
			1)工作人员的身份验证，如果非法直接拒绝。
			2)对于合法工作人员身份，则接受所传递的信息，进行候选人数据修改操作，并返回提示（删除成功）
			
		7、投票开始	
		
			1)工作人员的身份验证，如果非法直接拒绝。
			2)对于合法工作人员身份，判断投票系统是否为END状态，如果是则返回提示(投票系统已处于终止状态)
			3)则接受所传递的信息，并返回提示（开启投票成功）
			
		7、投票关闭	
		
			1)工作人员的身份验证，如果非法直接拒绝。
			2)对于合法工作人员身份，则接受所传递的信息，将投票系统置位终止状态不再能开启，并返回提示（关闭投票成功），	

		8、查询投票结果（候选人）
			1)工作人员的身份验证，如果非法直接拒绝。
			2)对于合法工作人员身份，则接受所传递的信息，并且返回所有候选人名字，以及对应的得票数。
			
		
